From 62cac62b44880b691f3fdb24fbd0dfef34d9b0c7 Mon Sep 17 00:00:00 2001
From: Chris Lalancette <clalancette@openrobotics.org>
Date: Wed, 17 Nov 2021 22:15:39 +0000
Subject: [PATCH] Remove the malloc_hook from the pendulum_demo.

glibc 2.34 has removed malloc_hook completely, which means we
can no longer use it (even with deprecations).

That said, it appears that the functionality was broken in
pendulum_demo anyway.  The idea with the malloc_hook was that
it would allow mallocs during initialization, and then disallow
mallocs during execution.  However, I manually added a malloc
during the execution phase, and it did *not* trigger the hook.

Because of all of this, just remove this functionality for now.

Signed-off-by: Chris Lalancette <clalancette@openrobotics.org>
---
 pendulum_control/src/pendulum_demo.cpp | 71 ++------------------------
 1 file changed, 5 insertions(+), 66 deletions(-)

diff --git a/pendulum_control/src/pendulum_demo.cpp b/pendulum_control/src/pendulum_demo.cpp
index 4efbf7a..0653215 100644
--- a/pendulum_control/src/pendulum_demo.cpp
+++ b/pendulum_control/src/pendulum_demo.cpp
@@ -12,82 +12,28 @@
 // See the License for the specific language governing permissions and
 // limitations under the License.
 
-#include <execinfo.h>
-#include <malloc.h>
-#include <sys/mman.h>
-#include <sys/resource.h>
 #include <unistd.h>
 
+#include <rttest/rttest.h>
+
 #include <rclcpp/rclcpp.hpp>
 #include <rclcpp/strategies/message_pool_memory_strategy.hpp>
 #include <rclcpp/strategies/allocator_memory_strategy.hpp>
 
-#include <rttest/rttest.h>
-
 #include <tlsf_cpp/tlsf.hpp>
 
 #include <pendulum_msgs/msg/joint_command.hpp>
 #include <pendulum_msgs/msg/joint_state.hpp>
 #include <pendulum_msgs/msg/rttest_results.hpp>
 
+#include <chrono>
+#include <cstdio>
 #include <memory>
 
 #include "pendulum_control/pendulum_controller.hpp"
 #include "pendulum_control/pendulum_motor.hpp"
 #include "pendulum_control/rtt_executor.hpp"
 
-
-static bool running = false;
-
-// Initialize a malloc hook so we can show that no mallocs are made during real-time execution
-
-/// Declare a function pointer into which we will store the default malloc.
-static void * (* prev_malloc_hook)(size_t, const void *);
-
-// Use pragma to ignore a warning for using __malloc_hook, which is deprecated (but still awesome).
-#pragma GCC diagnostic push
-#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
-/// Implement a custom malloc.
-/**
- * Our custom malloc backtraces to find the address of the function that called malloc and formats
- * the line as a string (if the code was compiled with debug symbols.
- * \param[in] size Requested malloc size.
- * \param[in] caller pointer to the caller of this function (unused).
- * \return Pointer to the allocated memory
- */
-static void * testing_malloc(size_t size, const void * caller)
-{
-  (void)caller;
-  // Set the malloc implementation to the default malloc hook so that we can call it implicitly
-  // to initialize a string, otherwise this function will loop infinitely.
-  __malloc_hook = prev_malloc_hook;
-
-  if (running) {
-    fprintf(stderr, "Called malloc during realtime execution phase!\n");
-    rclcpp::shutdown();
-    exit(-1);
-  }
-
-  // Execute the requested malloc.
-  void * mem = malloc(size);
-  // Set the malloc hook back to this function, so that we can intercept future mallocs.
-  __malloc_hook = testing_malloc;
-  return mem;
-}
-
-/// Function to be called when the malloc hook is initialized.
-void init_malloc_hook()
-{
-  // Store the default malloc.
-  prev_malloc_hook = __malloc_hook;
-  // Set our custom malloc to the malloc hook.
-  __malloc_hook = testing_malloc;
-}
-#pragma GCC diagnostic pop
-
-/// Set the hook for malloc initialize so that init_malloc_hook gets called.
-void(*volatile __malloc_initialize_hook)(void) = init_malloc_hook;
-
 using rclcpp::strategies::message_pool_memory_strategy::MessagePoolMemoryStrategy;
 using rclcpp::memory_strategies::allocator_memory_strategy::AllocatorMemoryStrategy;
 
@@ -100,7 +46,7 @@ int main(int argc, char * argv[])
   // In the initialization phase of a realtime program, non-realtime-safe operations such as
   // allocation memory are permitted.
 
-  // Create a structure with the default physical propreties of the pendulum (length and mass).
+  // Create a structure with the default physical properties of the pendulum (length and mass).
   pendulum_control::PendulumProperties properties;
   // Instantiate a PendulumMotor class which simulates the physics of the inverted pendulum
   // and provide a sensor message for the current position.
@@ -288,9 +234,6 @@ int main(int argc, char * argv[])
 
   // End initialization phase
 
-  // Execution phase
-  running = true;
-
   // Unlike the default SingleThreadedExecutor::spin function, RttExecutor::spin runs in
   // bounded time (for as many iterations as specified in the rttest parameters).
   executor->spin();
@@ -299,10 +242,6 @@ int main(int argc, char * argv[])
 
   // End execution phase
 
-  // Teardown phase
-  // deallocation is handled automatically by objects going out of scope
-  running = false;
-
   printf("PendulumMotor received %zu messages\n", pendulum_motor->messages_received);
   printf("PendulumController received %zu messages\n", pendulum_controller->messages_received);
 
-- 
2.34.1

