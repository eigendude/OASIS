################################################################################
# This workflow will do a clean install of project dependencies, build the
# source code and run tests.
################################################################################

name: OASIS ROS

# Controls when the action will run. Triggers the workflow on push or pull
# request events
on: [push, pull_request]

# A workflow run is made up of one or more jobs that can run sequentially or in
# parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-18.04
            ros1_distro: noetic
            ros2_distro: galactic
            arduino_ide: 1.8.18
          - os: ubuntu-20.04
            ros1_distro: noetic
            ros2_distro: galactic
            arduino_ide: 1.8.18

    # Steps represent a sequence of tasks that will be executed as part of the
    # job
    steps:
      - name: Build environment information
        run: 'echo "Matrix OS: ${{ matrix.os }} on $HOSTNAME with $(getconf _NPROCESSORS_ONLN) cores"'

      # Check-out the repository under $GITHUB_WORKSPACE, so the job can
      # access it
      - name: Checkout main repo
        uses: actions/checkout@v2

      - name: Restore CMake
        id: restore-cmake
        uses: actions/cache@v2
        with:
          path: |
            ros-ws/cmake/install
          key: restore-cmake-${{ matrix.os }}-${{ hashFiles('oasis_tooling/scripts/*cmake.sh') }}

      # Skip ROS 1 on ubuntu-18.04
      - name: Restore ROS 1 Desktop
        id: restore-ros1-desktop
        if: matrix.os != 'ubuntu-18.04'
        uses: actions/cache@v2
        with:
          path: |
            ros-ws/ros1-desktop-${{ matrix.ros1_distro }}/install
          key: restore-ros1-desktop-${{ matrix.os }}-${{ matrix.ros1_distro }}-${{ hashFiles('oasis_tooling/config/cv_bridge/**', 'oasis_tooling/scripts/*ros1_desktop.sh') }}

      - name: Restore ROS 2 Desktop
        id: restore-ros2-desktop
        uses: actions/cache@v2
        with:
          path: |
            ros-ws/ros2-desktop-${{ matrix.ros2_distro }}/install
          key: restore-ros2-desktop-${{ matrix.os }}-${{ matrix.ros2_distro }}-${{ hashFiles('oasis_tooling/config/ros2_desktop/**', 'oasis_tooling/scripts/*ros2_desktop.sh') }}

      - name: Restore OASIS dependencies
        id: restore-oasis-depends
        uses: actions/cache@v2
        with:
          path: |
            ros-ws/oasis-depends-${{ matrix.ros2_distro }}/install
          key: restore-oasis-depends-${{ matrix.os }}-${{ matrix.ros2_distro }}-${{ hashFiles('oasis_tooling/config/depends.repos', 'oasis_tooling/scripts/*oasis_deps.sh') }}

      - name: Restore Arduino IDE
        id: restore-arduino-ide
        uses: actions/cache@v2
        with:
          path: |
            oasis_avr/arduino-${{ matrix.arduino_ide }}
          key: restore-arduino-ide-${{ matrix.arduino_ide }}-${{ hashFiles('oasis_avr/bootstrap.sh') }}

      - name: Add ROS 2 repo
        run: |
          curl -s https://raw.githubusercontent.com/ros/rosdistro/master/ros.asc | sudo apt-key add -
          sudo sh -c 'echo "deb [arch=$(dpkg --print-architecture)] http://packages.ros.org/ros2/ubuntu $(lsb_release -cs) main" > /etc/apt/sources.list.d/ros2-latest.list'

      - name: Install system dependencies
        run: |
          sudo apt update
          sudo apt install -y build-essential cmake git python3-colcon-common-extensions python3-colcon-ros python3-rosdep python3-vcstool
          python3 -m pip install --upgrade pip setuptools

      # Sometimes lark-parser is missing
      - name: Install missing Python dependencies
        run: |
          python3 -m pip install --upgrade importlib-resources lark-parser

      # This is needed by rosidl_generator_py
      - name: Install rosidl_generator_py dependencies
        run: |
          python3 -m pip install --upgrade numpy

      # This was needed to link oasis_drivers_cpp
      - name: Install libspdlog-dev
        if: matrix.os == 'ubuntu-20.04'
        run: |
          sudo apt install -y libspdlog-dev

      - name: Install CMake dependencies
        if: steps.restore-cmake.outputs.cache-hit != 'true'
        run: ./oasis_tooling/scripts/depinstall_cmake.sh

      - name: Build CMake
        if: steps.restore-cmake.outputs.cache-hit != 'true'
        run: ./oasis_tooling/scripts/build_cmake.sh

      - name: Install ROS 1 Desktop dependencies
        if: matrix.os != 'ubuntu-18.04' && steps.restore-ros1-desktop.outputs.cache-hit != 'true'
        run: ./oasis_tooling/scripts/depinstall_ros1_desktop.sh

      - name: Fix empy install for ROS 1
        if: matrix.os != 'ubuntu-18.04' && steps.restore-ros1-desktop.outputs.cache-hit != 'true'
        run: |
          sudo apt install -y python3-empy
          sudo ln -s -f /usr/bin/empy3 /usr/bin/empy

      - name: Fix missing Python 2 packages for ROS 1
        if: matrix.os != 'ubuntu-18.04' && steps.restore-ros1-desktop.outputs.cache-hit != 'true'
        run: |
          sudo apt install python2
          curl https://bootstrap.pypa.io/pip/2.7/get-pip.py --output get-pip.py
          sudo python2 get-pip.py
          python2 -m pip install --upgrade catkin_pkg empy pip PyYAML setuptools

      - name: Build ROS 1 Desktop
        if: matrix.os != 'ubuntu-18.04' && steps.restore-ros1-desktop.outputs.cache-hit != 'true'
        run: ./oasis_tooling/scripts/build_ros1_desktop.sh

      - name: Install ROS 2 Desktop dependencies
        if: steps.restore-ros2-desktop.outputs.cache-hit != 'true'
        run: ./oasis_tooling/scripts/depinstall_ros2_desktop.sh

      - name: Build ROS 2 Desktop
        if: steps.restore-ros2-desktop.outputs.cache-hit != 'true'
        run: ./oasis_tooling/scripts/build_ros2_desktop.sh

      - name: Install OASIS dependency rosdeps
        if: steps.restore-oasis-depends.outputs.cache-hit != 'true'
        run: ./oasis_tooling/scripts/depinstall_oasis_deps.sh

      - name: Build OASIS dependencies
        if: steps.restore-oasis-depends.outputs.cache-hit != 'true'
        run: ./oasis_tooling/scripts/build_oasis_deps.sh

      - name: Install OASIS rosdeps
        run: ./oasis_tooling/scripts/depinstall_oasis.sh

      - name: Bootstrap AVR toolchain
        run: |
          ./oasis_avr/bootstrap.sh

      - name: colcon build
        run: ./oasis_tooling/scripts/build_oasis.sh
